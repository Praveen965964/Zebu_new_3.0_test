{"ast":null,"code":"import axios from 'axios';\n// import { createChart } from \"lightweight-charts\";\nimport { widget } from '../../../public/charting_library';\nimport Datafeed from '../../alldata/feedFactory';\n// import { BrokerApiIns } from \"../brokerapis\";\n// import { widget } from \"../../alldata/charting_library\";\n\n// import { websocketSubscription } from '../alldata/webSocketstream';\nimport { clientid, session } from '../../apiUrl';\n// export const chart =\n// console.log(chart)\n// var les=''\n// if(chart){\n//   les=localStorage.clearitem();\n//   les=localStorage.getItem('symbolssearch')\n// }else{\n//   les= localStorage.getItem('symbolssearch')\n// }\nexport default {\n  name: \"TVChartContainers\",\n  setup() {},\n  data() {\n    return {\n      // SavedSymbol:''\n      dadata: '',\n      weblp: '',\n      // socket : new WebSocket(\"wss://go.mynt.in/NorenWSWeb/\"),\n      // connection:[];\n      downcallSideOption: [],\n      downputSideOption: []\n    };\n  },\n  // components: {\n  //   ...ltp\n  // },\n  computed: {\n    // ltp,\n    // websocketSubscription\n  },\n  // props: ['message','tokens'],\n  props: {\n    // value:{\n    //   default:['message'],\n    //   type:Object,\n    // },\n    // symbol: {\n    // \t// default: \"NSE:Nifty 50\",\n    //   // default: \"NSE:RELIANCE-EQ\",\n    //   // default: this.value.tsym,\n    //   // default: \"TATASTLLP-EQ\",\n    //   // default: localStorage.getItem('symbolssearch'),\n    //   default: \"\",\n    // \ttype: String,\n    // },\n    interval: {\n      default: '10',\n      // default: localStorage.getItem(\"tradingview.chart.lastUsedTimeBasedResolution\")? localStorage.getItem(\"tradingview.chart.lastUsedTimeBasedResolution\") : \"5\",\n      type: String\n    },\n    // datafeedUrl: {\n    // \tdefault: Datafeed,\n    // \ttype: Object,\n    // },\n    libraryPath: {\n      default: 'charting_library/',\n      type: String\n    },\n    chartsStorageUrl: {\n      default: 'https://saveload.tradingview.com',\n      type: String\n    },\n    chartsStorageApiVersion: {\n      default: '1.1',\n      type: String\n    },\n    clientId: {\n      default: 'ZEBU',\n      type: String\n    },\n    userId: {\n      default: '',\n      type: String\n    },\n    Undo: {\n      default: false,\n      type: Boolean\n    },\n    fullscreen: {\n      default: false,\n      type: Boolean\n    },\n    autosize: {\n      default: true,\n      type: Boolean\n    },\n    studiesOverrides: {\n      type: Object\n    }\n  },\n  tvWidget: null,\n  //   data() {\n  //     return {\n  //       dialog:false,\n  //       chartvalue:0,\n  //       charts:[],\n  //       linechart3:[],\n  //       datalinechart :[],\n  //       todayDate : 0,\n  //       d:0,\n  //       sor: [],\n  //       // message:'',\n  //             // this.chart1=[];\n  //             // this.chartOptions1 = [];\n  //             // this.lineSeries1 = [];\n  //     }\n  //   },\n  //   methods: {\n  //     chart() {\n  //       this.dialog=true;\n  //       this.datalinechart = [];\n  //             // this.chart1=[];\n  //             this.lineSeries1 = [];\n  // const chartOptions3 = {\n  //         // width: 600,\n  //         height: 250,\n  //         autoSize: true,\n  //         // fixLeftEdge: true,\n  //         layout: {\n  // \t\ttextColor: 'black',\n  //     background: { type: 'solid', color: 'white' },\n  // \t\t// background: { type: 'solid', color: 'white' },\n  //     fontFamily: \"'Inter', sans-serif\",\n  //     width:4\n  // \t},\n  //   // priceScaleId:{visible:false,},\n  //         crosshair: {\n  //     vertLine: {\n  //       labelVisible: false,\n  //       // width:1,\n  //     },\n  //     horzLine:{\n  //       visible:false,\n  //     },\n  //     },\n  //         leftPriceScale: {\n  //           visible: false,\n  //           borderVisible: false,\n  //         },\n  //         rightPriceScale: {\n  //           visible: false,\n  //           borderVisible: false,\n  //         },\n\n  //         grid: {\n  //           lineWidth: 3,\n\n  //           vertLines: {\n  //             // color: '#2B2B43',\n  //             visible: false,\n  //             drawOnChartArea: false\n  //           },\n  //           horzLines: {\n  //             // color: '#363C4E',\n  //             visible: true,\n  //             drawOnChartArea: false,\n  //             // width:20,\n  //           },\n  //         },\n  //         timeScale: {\n  //       fixLeftEdge: true,\n  //       fixRightEdge: true,\n  //     },\n  //       };\n\n  //       this.charts = createChart(this.$refs.linechart, chartOptions3);\n\n  //       // var chart= createChart(document.getElementById('chartContainer3'), chartOptions3);\n  //       this.lineSeries1 = this.charts.addAreaSeries({\n  //         // lineColor: \"rgba(102, 102, 102, 1)\",\n  //         lineColor:'rgba(95,94,94,0.75)',\n  //         topColor:'rgba(63,63,63,0.15)',\n  //         bottomColor:'rgba(63,63,63,0.01)',\n  //         // bottomColor:'rgba(104,104,104,0.8)',\n  //         // color:'rgba(63,63,63,1)',\n  //         lineWidth: 2,\n  //         priceLineVisible: false,\n  //         // overlay: true,\n  //         // priceScaleId: '',\n\n  //         // crosshairMarkerVisible: true,\n  //         // crosshairMarkerRadius: 4,\n\n  //       });\n  //       this.mothlychart();\n  //         },\n  //         mothlychart(vals) {\n  //           // this.datalinechart = [];\n  //           // this.todayDate = 0;\n  //           this.month = vals;\n\n  //           // console.log(this.message,'data')\n  //           const val = this.message\n  //             this.sor = [];\n  //             this.d = 0;\n  //           let tk = ''\n  //           for(const elm of val){\n  //           // console.log(elm.exch ,elm.tsym)\n  //           tk=elm.exch +\":\"+ elm.tsym\n  //         }\n\n  //         this.chartvalue=0,\n  //             this.datalinechart = [];\n  //             this.firstmonth = [];\n  //             this.sor = [];\n  //             this.todayDate = 0;\n  //             this.d = 0;\n  //             // console.log('this.values', `\"${this.chartexch + ':' + this.exchnamechart}\"`)\n  //             if (this.month == '1M') {\n  //                 // this.sor=[];\n  //                 // this.firstmonth=[];\n  //                 // this.todayDate =0;\n\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 1);\n  //                 const onemonth = this.d.toISOString().slice(0, 10)\n  //                 // console.log(todayDate)\n  //                 // console.log(Date.parse(onemonth)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var axiosthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(onemonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n\n  //                 });\n\n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n\n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         // console.log('responses 1', response.data)\n\n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n\n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc'])}\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n\n  //                         this.lineSeries1.setData(this.sor);\n  //                         // })\n  //                         this.charts.timeScale().fitContent();\n\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n\n  //             }else if (this.month == '3M') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 3);\n  //                 const threemonth = this.d.toISOString().slice(0, 10)\n  //                 // console.log(threemonth, this.todayDate)\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var thirdthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(threemonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n\n  //                 });\n\n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n\n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         console.log('responses 3', response.data)\n\n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n\n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n\n  //                         this.lineSeries1.setData(this.sor);\n  //                         // })\n  //                         this.charts.timeScale().fitContent();\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //                 // this.chart()\n  //             } else if (this.month == '6M') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 6);\n  //                 const sixmonth = this.d.toISOString().slice(0, 10)\n  //                 console.log(sixmonth, this.todayDate);\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var sixththis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(sixmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n\n  //                 });\n\n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n\n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         console.log('responses', response.data)\n\n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n\n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n\n  //                         this.lineSeries1.setData(this.sor);\n  //                         this.charts.timeScale().fitContent();\n  //                         // })\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             } else if (this.month == '1YR') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 12);\n  //                 const oneyearmonth = this.d.toISOString().slice(0, 10)\n  //                 console.log(oneyearmonth, this.todayDate);\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var firtyearthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(oneyearmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n\n  //                 });\n\n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n\n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         console.log('responses 1y', response.data)\n\n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n\n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n\n  //                         this.lineSeries1.setData(this.sor);\n  //                         // })\n  //                         this.charts.timeScale().fitContent();\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             } else if (this.month == '3YR') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 36);\n  //                 const threeyearmonth = this.d.toISOString().slice(0, 10)\n  //                 console.log(threeyearmonth, this.todayDate);\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var thirdyearthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(threeyearmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n\n  //                 });\n\n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n\n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         console.log('responses 3', response.data)\n\n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n\n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n\n  //                         this.lineSeries1.setData(this.sor);\n  //                         this.charts.timeScale().fitContent();\n  //                         // })\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             }\n  //             else if (this.month == '5YR') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 60);\n  //                 const fiveyearmonth = this.d.toISOString().slice(0, 10)\n  //                 console.log(fiveyearmonth, this.todayDate);\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var fifthyearthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(fiveyearmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n\n  //                 });\n\n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n\n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         console.log('responses 5', response.data)\n\n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n\n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n\n  //                         this.lineSeries1.setData(this.sor);\n  //                         // })\n  //                         this.charts.timeScale().fitContent();\n\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             } else if (this.month == 'MAX') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 120);\n  //                 const defaltmonth = this.d.toISOString().slice(0, 10)\n  //                 // console.log(todayDate)\n  //                 // console.log(Date.parse(this.todayDate) / 1000 + 19800);\n  //                 // console.log(Date.parse(defaltmonth) / 1000 + 19800)\n  //                 // var tenthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(defaltmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n\n  //                 });\n\n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n\n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         // console.log('res',response)\n\n  //                         this.firstmonth = response.data.map((val) => {\n  //                             // console.log(val)\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n\n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n\n  //                         this.lineSeries1.setData(this.sor);\n  //                         this.charts.timeScale().fitContent();\n\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             } else {\n\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 1);\n  //                 const defaltmonth = this.d.toISOString().slice(0, 10)\n  //                 // console.log(todayDate)\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var defalutthis = this;\n\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(defaltmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n\n  //                 });\n\n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n\n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         // console.log('res',response)\n\n  //                         this.firstmonth = response.data.map((val) => {\n  //                             // console.log(val)\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n\n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc'] )}\n  //                         });\n\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n\n  //                         this.lineSeries1.setData(this.sor);\n\n  //                         this.charts.timeScale().fitContent();\n\n  //                         // })\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             }\n\n  //       document.body.style.position = \"relative\";\n  //       var container = document.createElement(\"div\");\n  //       document.body.appendChild(container);\n\n  //       var toolTipWidth = 100;\n  //       var toolTipHeight = 80;\n  //       var toolTipMargin = 15;\n  //       var toolTip = document.createElement(\"div\");\n  //       // toolTip.style =  `width: 96px; height: 80px; position: absolute; display: none; padding: 8px; box-sizing: border-box; font-size: 12px; text-align: left; z-index: 1000; top: 12px; left: 12px; pointer-events: none; border: 1px solid; border-radius: 2px;font-family: -apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;`;\n  //       // toolTip.style.background = 'white';\n  //       // toolTip.style.color = 'black';\n  //       // toolTip.style.borderColor = 'rgba(0, 150, 136, 1)';\n  //       toolTip.className = \"tooltip\";\n  //       container.appendChild(toolTip);\n  //       this.charts.subscribeCrosshairMove((param) => {\n  //         console.log(\"parma\", param);\n  //         if (\n  //           param.point === undefined ||\n  //           !param.time ||\n  //           param.point.x < 0 ||\n  //           param.point.x > this.charts.clientWidth ||\n  //           param.point.y < 0 ||\n  //           param.point.y > this.charts.clientHeight\n  //         ) {\n  //           toolTip.style.display = \"none\";\n  //         } else {\n  //           // time will be in the same format that we supplied to setData.\n  //           // thus it will be YYYY-MM-DD\n  //           // const dateStr = param.time;\n  //           // console.log('str dates',dateStr)\n  //           toolTip.style.display = \"block\";\n  //           var data = param.seriesData.get(this.lineSeries1);\n  //           // var secdata= param.seriesData.get(secondval);\n  //           // var threedata= param.seriesData.get(thirdval);\n  //           var price = data.value \n  //           const x =data.time-19800\n  //           var lestm = new Date(x * 1000)\n\n  //           var time = lestm.getHours() +':' +lestm.getMinutes();\n\n  //         // var time = data.time\n  //           var date = new Date(data.time*1000)\n  //           // var day = new Date(0)\n  //           // var times = date.time\n  //           // var formet= new Intl.DateTimeFormat('fr', {month: 'short'})\n  //           var time_date =date.toLocaleString('default', {month:\"short\"}) + ' '+date.getDate()+','+ date.getFullYear() \n  //           console.log(time_date,(time))\n\n  //           // const secprice = secdata.value !== undefined ? secdata.value : '';\n  //           // const thirprice = threedata.value !== undefined ? threedata.value : '';\n  //           console.log(\"param1\", price, data.time );\n  //           // toolTip.innerHTML = `<div style=\"color: ${'rgba(0, 150, 136, 1)'}\">Apple Inc.</div><div style=\"font-size: 24px; margin: 4px 0px; color: ${'black'}\">\n  //           // \t${Math.round(100 * price) / 100}\n\n  //           // \t</div><div style=\"color: ${'black'}\">\n  //           // \t${dateStr}\n  //           // \t</div>`;toolTip1.innerHTML = `<div style=\"font-size: 16px;font-weight:bold;Line-height:14px; margin: 4px 0px;font-family: \"Inter\", sans-serif; color: ${'black'}\">${ '&#8377;'+Math.round(100 * price) / 100}</div><div style=\"font-size:14px;font-family: \"Inter\", sans-serif;color: ${'black'}\">${dateStr}</div>`;\n  //           // var vol = []\n  //           // if(price){\n  //           //   const todayDate = new Date().toISOString().slice(0, 10);\n  //           //       const d = new Date(todayDate);\n  //           //       d.setMonth(d.getMonth() - 120);\n  //           //       const defaltmonth = d.toISOString().slice(0, 10)\n  //           //       // console.log(todayDate)\n  //           //       // console.log(Date.parse(this.todayDate) / 1000 + 19800);\n  //           //       // console.log(Date.parse(defaltmonth) / 1000 + 19800)\n  //           //       // var tenthis = this;\n  //           //       let data = JSON.stringify({\n  //           //           // \"symbol\":\"NSE:Nifty 50\",\n  //           //           \"symbol\": tk,\n  //           //           //   \"start\": 1687868553,\n  //           //           //   \"end\": 1688534153,\n  //           //           start: Date.parse(defaltmonth) / 1000 + 19800,\n  //           //           end: Date.parse(todayDate) / 1000 + 19800,\n\n  //           //       });\n\n  //           //       let config = {\n  //           //           method: 'post',\n  //           //           maxBodyLength: Infinity,\n  //           //           url: `${api}/getchartData`,\n  //           //           headers: {\n  //           //               'Content-Type': 'application/json'\n  //           //           },\n  //           //           data: data\n  //           //       };\n\n  //           //       axios.request(config)\n  //           //           .then((response) => {\n  //           //               // console.log('res',response)\n  //           //            const data= JSON.parse(response.data)\n  //           //               // console.log(vol)\n  //           //               for(const elem in data){\n  //           //                 vol.push({'volume':JSON.parse(elem['intv'])})\n\n  //           //               }\n  //           //               console.log('data',vol)\n\n  //           //           })\n  //           //           .catch((error) => {\n  //           //               console.log(error);\n  //           //           });\n  //           // }\n\n  //           // toolTip.style =`box-shadow: 0 0 5px 2px #9e9e9e3a;`\n  //           toolTip.innerHTML = \n  //           '<div style=\"display: flex;flex-wrap: wrap;\"><div style=\"font-size: 14px; margin: 4px 0px ;text-align: left;color=\"#000\";font-family: \"Inter;line-height:16px; font-weight:559;letter-spacing:-0.28px;font-style:normal;\", sans-serif;   id=text;>INR ₹'+ Math.round(100 * price) / 100+\"</div></div>\"+\n  //           '<div style=\"display: flex;flex-wrap: wrap;\"><div style=\"line-height:100%;letter-spacing: -0.096px;font-style: normal;font-weight: 469;font-size: 12px;margin: 4px 0px ;color: #666;font-family: \"Inter\", sans-serif;   id=text;>'+time_date + '-' +time +\"</div></div>\"+\n  //           '<div style=\"display: flex;flex-wrap: wrap;\"><div style=\"line-height:100%;letter-spacing: -0.096px;font-style: normal;font-weight: 469;font-size: 12px; margin: 4px 0px ;color=\"#666\";font-family: \"Inter\", sans-serif;   id=text;>Volume :' +time+ \"</div></div>\"\n\n  //           var coordinate = this.lineSeries1.priceToCoordinate(price);\n  //           var shiftedCoordinate = param.point.x + 400;\n  //           if (coordinate === null) {\n  //             return;\n  //           }\n  //           shiftedCoordinate = Math.max(0,Math.min(container.clientWidth - toolTipWidth, shiftedCoordinate));\n  //           var coordinateYaxis = coordinate - toolTipHeight - toolTipMargin > 0 ? coordinate - toolTipHeight - toolTipMargin : Math.max(0,Math.min(container.clientHeight - toolTipHeight - toolTipMargin,coordinate + toolTipMargin));\n  //           toolTip.style.left = shiftedCoordinate + \"px\";\n  //           toolTip.style.top = coordinateYaxis +300 + \"px\";\n\n  //         }\n  //       });\n\n  //         },\n\n  //       },\n\n  // mounted() {\n\n  //    this.chart()\n  //   // console.log(this.$route.value)\n  //   // console.log(this.value, window.location.href.split())\n  //   console.log('tk new values: ',this.token)\n\n  // },\n  beforeDestroy() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  },\n  mounted() {\n    this.values();\n    // this.sockets();\n    //  console.log(ProcessPacketString,'Response')\n  },\n\n  methods: {\n    // closeChart(){\n\n    // }\n    values() {\n      this.dadata = localStorage.getItem('symbolssearch');\n      let container = this.$refs.chartContainer;\n\n      // this.dadata=localStorage\n      // console.log(this.dadata,this.datafeedUrl, localStorage.getItem('token'))\n      // container.appaendChild(this.$route.push('webchart'))  \n      const widgetOptions = {\n        // symbol:this.symbol ? this.dadata : this.symbol,\n        symbol: this.dadata,\n        datafeed: Datafeed,\n        save_image: false,\n        interval: this.interval,\n        container: container,\n        library_path: this.libraryPath,\n        auto_save_delay: 5,\n        timezone: \"Asia/Kolkata\",\n        locale: 'en',\n        theme: \"White\",\n        disableUndo: this.disableUndo,\n        // \"use_localstorage_for_settings\",\n        disabled_features: [\n        // \"use_localstorage_for_settings\",\n        \"watchlist_import_export\", \"header_saveload\", \"header_symbol_search\", \"header_compare\", \"header_screenshot\"\n        // \"Save\",\n        ],\n\n        enabled_features: [\"dom_widget\", \"use_localstorage_for_settings\"],\n        // charts_storage_api_version: this.chartsStorageApiVersion,\n        client_id: this.clientId,\n        user_id: this.userId,\n        fullscreen: this.fullscreen,\n        autosize: this.autosize,\n        studies_overrides: this.studiesOverrides\n        //   symbol_search_complete:(symbol) => {\n        //   console.log('selected symbol =>',symbol)\n        //   return new Promise((resolve)=>{\n        //     let newSymbol =   `this is my symbol- ${Window.localStorage.getItem('data')}`;\n        //     resolve(newSymbol)\n        //   })\n        // }\n      };\n\n      const tvWidget = new widget(widgetOptions);\n      this.tvWidget = tvWidget;\n      tvWidget.onChartReady(() => {\n        tvWidget.activeChart().applyOverrides({\n          \"mainSeriesProperties.style\": 1\n        });\n        // tvWidget.subscribe(\"onAutoSaveNeeded\", function () {\n        //       tvWidget.save((obj) => {\n        //         console.log(obj,'val ')\n        //         localStorage.setItem(\"autoSave\", JSON.stringify(obj));\n        //       });\n        //     });\n        console.log(tvWidget.activeChart());\n        tvWidget.headerReady().then(() => {\n          const button = tvWidget.createButton();\n          button.setAttribute('title', 'Click to show a notification popup');\n          button.classList.add('apply-common-tooltip');\n          button.addEventListener('click', () => tvWidget.showNoticeDialog({\n            title: 'Notification',\n            body: 'TradingView Charting Library API works correctly',\n            callback: () => {\n              // eslint-disable-next-line no-console\n              console.log('Noticed!');\n            }\n          }));\n          // filled\n          // button.innerHTML = 'Check API';\n        });\n      });\n      // this.subscrip()\n      // this.subscrip()\n      // var set = `${(localStorage.getItem('symbolssearch')).slice(0,3)}`+'|'+`${localStorage.getItem('token')}`\n      // //  var tes= Datafeed.resolveSymbol(\n      // //   `${(localStorage.getItem('symbolssearch')).slice(0,3)}`+'|'+`${localStorage.getItem('token')}`,\n\n      // //   )\n      //   // console.log(Datafeed.ltp)\n      // console.log('set',set,this.symbolInfos)\n      // console.log('jdus', tes)\n      // setTimeout(() => {\n      this.weblp = localStorage.getItem('ltp');\n      console.log(this.websocketSubscription);\n      // },100)\n      const tvWidgets = new widget(widgetOptions);\n      //   this.tvWidget = tvWidget;\n      //   window.tvWidget = tvWidget;\n      console.log(tvWidgets, 'tudigets');\n      this.ltp();\n    },\n    ltp() {\n      let data = `jData={\"uid\":\"${clientid}\", \"exch\":\"${this.dadata.slice(0, 3)}\",\"token\":\"${localStorage.getItem('token')}\"}&jKey=${session}`;\n      console.log(data);\n      // if(data){\n      let config = {\n        method: 'post',\n        //   maxBodyLength: Infinity,\n        url: 'https://go.mynt.in/NorenWClientTP/GetQuotes',\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        data: data\n      };\n      axios.request(config).then(response => {\n        console.log(response.data);\n        // const les= response.data\n        // Datafeed.subscribeQuotesgetltpsub(\n        //     les,\n        //     this.optionChainDataParse,             \n        //     undefined\n        //   );\n\n        // console.log(this.closeorderdata,'lp added')\n      }).catch(error => {\n        console.log(error);\n      });\n\n      // }\n\n      //  async subscrip() {\n\n      //     // const axios = require('axios');\n      // //  var data= `jData={\"uid\":\"${clientid}\", \"exch\":\"${(localStorage.getItem('symbolssearch')).slice(0,3)}\",\"token\":\"${localStorage.getItem('token')}\"}&jKey=${session}`;\n\n      // // var ltps=[]\n      // // this.weblp =0;\n      // let connection = new WebSocket('wss://go.mynt.in/NorenWSWeb/');\n\n      // connection.onopen = function () {\n      // // var message = {\"t\": \"c\",\"uid\": `${clientid}`,\"actid\": `${clientid}`,\"source\":\"WEB\",\"susertoken\": `${session}`}\n      // var token = {\"t\": \"d\",\"k\": `${(localStorage.getItem('symbolssearch')).slice(0,3)}`+'|'+`${localStorage.getItem('token')}#`};\n\n      // console.log(token);\n\n      // // connection.send(JSON.stringify(message));\n      // setTimeout(() => {\n      // connection.send(JSON.stringify(token));\n      // }, 2000);\n\n      // connection.onmessage = (msg) => {\n      // let count = JSON.parse(msg.data);\n      // console.log(count,\"ltp\");\n      // if(count.t == 'df'){\n      // if(count.lp !== undefined){\n      // // console.log(count.lp,'values')\n      // // this.weblp=(count.lp)\n      // // this.ltps.push(count.lp)\n      // this.weblp=count.lp\n      // // document.getElementById('values') = count.lp\n      // }\n      // console.log(this.weblp,'ltp')\n      // // console.log(this.ltps)\n      // }else {\n      // //\n      // }\n\n      // };};\n      // // console.log(data)\n\n      // },\n      //   subscribeQuotes(symbols, fastSymbols, onRealtimeCallback, listenerGUID) {\n      //     // In this example, `_quotesSubscriptions` is a global variable used to clear the subscription in `unsubscribeQuotes`\n      //     console.log(symbols,fastSymbols,onRealtimeCallback,listenerGUID,'jkjksad')\n      //     // this._quotesSubscriptions[listenerGUID] = setInterval(() => this.getQuotes(symbols.concat(fastSymbols), onRealtimeCallback, () => undefined), 5000);\n      // },\n    }\n    //  optionChainDataParse(data) {\n    //       console.log(data,'optioncharin')\n\n    //     },\n    //  watch() {\n    //   this.weblp\n    //  }\n  },\n\n  destroyed() {\n    if (this.tvWidget !== null) {\n      this.tvWidget.remove();\n      this.tvWidget = null;\n    }\n  }\n};","map":{"version":3,"names":["axios","widget","Datafeed","clientid","session","name","setup","data","dadata","weblp","downcallSideOption","downputSideOption","computed","props","interval","default","type","String","libraryPath","chartsStorageUrl","chartsStorageApiVersion","clientId","userId","Undo","Boolean","fullscreen","autosize","studiesOverrides","Object","tvWidget","beforeDestroy","window","removeEventListener","handleScroll","mounted","values","methods","localStorage","getItem","container","$refs","chartContainer","widgetOptions","symbol","datafeed","save_image","library_path","auto_save_delay","timezone","locale","theme","disableUndo","disabled_features","enabled_features","client_id","user_id","studies_overrides","onChartReady","activeChart","applyOverrides","console","log","headerReady","then","button","createButton","setAttribute","classList","add","addEventListener","showNoticeDialog","title","body","callback","websocketSubscription","tvWidgets","ltp","slice","config","method","url","headers","request","response","catch","error","destroyed","remove"],"sources":["src/views/Portfolio/WebChart.vue"],"sourcesContent":["<template>\n    <div>\n                                              <div >  \n                                                  <!-- <v-card class='rounded-lg'>\n                                              <v-card-title class='grey lighten-2 pb-6'>\n                                                <v-row><v-col cols=\"12\" class=\"my-0 py-0\">\n                                                <span style=\"color: #000;\n                          font-size: 20px;\n                          line-height: 16px; /* 80% */\n                          letter-spacing: -1px;\">{{dadata.slice(4)}}</span> <span style=\"font-size: 10px;line-height: 16px; \">{{dadata.slice(0,3)}}\n                          \n                        </span>\n                          </v-col><v-col cols='12' class=\"my-0 py-0\">\n                             {{ weblp }}\n                           <span v-if=\"lpclose>0\" style=\"\n                          font-size: 11px;\n                          \n                          color: #1fd601;\">\n                          \n                           {{ lpclose }} ({{ ((lpclose/lp)*100).toFixed(2) }}%)</span>\n                        </v-col>\n                      </v-row>\n                        \n                            <v-spacer></v-spacer>\n  \n                            <div>\n                              \n                      <div class=\"d-flex\">\n                        <v-card class=\"mb-0 px-2 mr-2 font-weight-bold black--text body-2 elevation-0\" color='green'\n                        >\n                        <span style=\"color: #ffffff ;\">B</span>\n                        </v-card>\n                        <label class=\"switch mr-2\">\n                          <input type=\"checkbox\" />\n                          <span class=\"sliderr round\"></span>\n                        </label>\n                        <v-card\n                          class=\"mb-0 px-2 ml-5 font-weight-medium body-2 elevation-0\"\n                          style=\"color: #ffffff\"\n                          color=\"red\"\n                        >\n                          S\n                      </v-card>\n                      \n                    </div>\n                  \n                            </div>\n                        \n                                              </v-card-title>\n                                               -->\n  \n                                              \n                                              \n                                                <div class=\"px-6\">\n                                                  <div class=\"TVChartContainers\" ref=\"chartContainer\" ></div>    \n                                              </div>\n                                              \n                                            <!-- </v-card> -->\n                                           \n    </div>\n    </div>\n  </template>\n  <script>\n  import axios from 'axios';\n  // import { createChart } from \"lightweight-charts\";\n  import { widget } from '../../../public/charting_library';\n  import Datafeed from '../../alldata/feedFactory';\n  // import { BrokerApiIns } from \"../brokerapis\";\n  // import { widget } from \"../../alldata/charting_library\";\n  \n  // import { websocketSubscription } from '../alldata/webSocketstream';\n  import {clientid , session } from '../../apiUrl';\n  // export const chart =\n  // console.log(chart)\n  // var les=''\n  // if(chart){\n  //   les=localStorage.clearitem();\n  //   les=localStorage.getItem('symbolssearch')\n  // }else{\n  //   les= localStorage.getItem('symbolssearch')\n  // }\n  export default {\n    name: \"TVChartContainers\",\n    setup() {\n      \n    },\n    data() {\n      return {\n        // SavedSymbol:''\n        dadata:'',\n        weblp:'',\n        // socket : new WebSocket(\"wss://go.mynt.in/NorenWSWeb/\"),\n        // connection:[];\n        downcallSideOption:[],\n        downputSideOption:[],\n      }\n    },\n    // components: {\n    //   ...ltp\n    // },\n    computed: {\n      // ltp,\n      // websocketSubscription\n    },\n    // props: ['message','tokens'],\n    props: {\n      // value:{\n      //   default:['message'],\n      //   type:Object,\n      // },\n          // symbol: {\n          // \t// default: \"NSE:Nifty 50\",\n      //   // default: \"NSE:RELIANCE-EQ\",\n      //   // default: this.value.tsym,\n      //   // default: \"TATASTLLP-EQ\",\n      //   // default: localStorage.getItem('symbolssearch'),\n      //   default: \"\",\n          // \ttype: String,\n          // },\n          interval: {\n              default: '10',\n        // default: localStorage.getItem(\"tradingview.chart.lastUsedTimeBasedResolution\")? localStorage.getItem(\"tradingview.chart.lastUsedTimeBasedResolution\") : \"5\",\n              type: String,\n          },\n          // datafeedUrl: {\n          // \tdefault: Datafeed,\n          // \ttype: Object,\n          // },\n          libraryPath: {\n              default: 'charting_library/',\n              type: String,\n          },\n          chartsStorageUrl: {\n              default: 'https://saveload.tradingview.com',\n              type: String,\n          },\n          chartsStorageApiVersion: {\n              default: '1.1',\n              type: String,\n          },\n          clientId: {\n              default: 'ZEBU',\n              type: String,\n          },\n          userId: {\n              default: '',\n              type: String,\n          },\n      Undo:{\n        default:false,\n        type: Boolean,\n      },\n          fullscreen: {\n              default: false,\n              type: Boolean,\n          },\n          autosize: {\n              default: true,\n              type: Boolean,\n          },\n          studiesOverrides: {\n              type: Object,\n          },\n    \n      },\n      tvWidget: null,\n  //   data() {\n  //     return {\n  //       dialog:false,\n  //       chartvalue:0,\n  //       charts:[],\n  //       linechart3:[],\n  //       datalinechart :[],\n  //       todayDate : 0,\n  //       d:0,\n  //       sor: [],\n  //       // message:'',\n  //             // this.chart1=[];\n  //             // this.chartOptions1 = [];\n  //             // this.lineSeries1 = [];\n  //     }\n  //   },\n  //   methods: {\n  //     chart() {\n  //       this.dialog=true;\n  //       this.datalinechart = [];\n  //             // this.chart1=[];\n  //             this.lineSeries1 = [];\n  // const chartOptions3 = {\n  //         // width: 600,\n  //         height: 250,\n  //         autoSize: true,\n  //         // fixLeftEdge: true,\n  //         layout: {\n  // \t\ttextColor: 'black',\n  //     background: { type: 'solid', color: 'white' },\n  // \t\t// background: { type: 'solid', color: 'white' },\n  //     fontFamily: \"'Inter', sans-serif\",\n  //     width:4\n  // \t},\n  //   // priceScaleId:{visible:false,},\n  //         crosshair: {\n  //     vertLine: {\n  //       labelVisible: false,\n  //       // width:1,\n  //     },\n  //     horzLine:{\n  //       visible:false,\n  //     },\n  //     },\n  //         leftPriceScale: {\n  //           visible: false,\n  //           borderVisible: false,\n  //         },\n  //         rightPriceScale: {\n  //           visible: false,\n  //           borderVisible: false,\n  //         },\n          \n  //         grid: {\n  //           lineWidth: 3,\n  \n  //           vertLines: {\n  //             // color: '#2B2B43',\n  //             visible: false,\n  //             drawOnChartArea: false\n  //           },\n  //           horzLines: {\n  //             // color: '#363C4E',\n  //             visible: true,\n  //             drawOnChartArea: false,\n  //             // width:20,\n  //           },\n  //         },\n  //         timeScale: {\n  //       fixLeftEdge: true,\n  //       fixRightEdge: true,\n  //     },\n  //       };\n  \n  //       this.charts = createChart(this.$refs.linechart, chartOptions3);\n  \n  //       // var chart= createChart(document.getElementById('chartContainer3'), chartOptions3);\n  //       this.lineSeries1 = this.charts.addAreaSeries({\n  //         // lineColor: \"rgba(102, 102, 102, 1)\",\n  //         lineColor:'rgba(95,94,94,0.75)',\n  //         topColor:'rgba(63,63,63,0.15)',\n  //         bottomColor:'rgba(63,63,63,0.01)',\n  //         // bottomColor:'rgba(104,104,104,0.8)',\n  //         // color:'rgba(63,63,63,1)',\n  //         lineWidth: 2,\n  //         priceLineVisible: false,\n  //         // overlay: true,\n  //         // priceScaleId: '',\n      \n          \n  //         // crosshairMarkerVisible: true,\n  //         // crosshairMarkerRadius: 4,\n         \n  //       });\n  //       this.mothlychart();\n  //         },\n  //         mothlychart(vals) {\n  //           // this.datalinechart = [];\n  //           // this.todayDate = 0;\n  //           this.month = vals;\n  \n  //           // console.log(this.message,'data')\n  //           const val = this.message\n  //             this.sor = [];\n  //             this.d = 0;\n  //           let tk = ''\n  //           for(const elm of val){\n  //           // console.log(elm.exch ,elm.tsym)\n  //           tk=elm.exch +\":\"+ elm.tsym\n  //         }\n          \n  //         this.chartvalue=0,\n  //             this.datalinechart = [];\n  //             this.firstmonth = [];\n  //             this.sor = [];\n  //             this.todayDate = 0;\n  //             this.d = 0;\n  //             // console.log('this.values', `\"${this.chartexch + ':' + this.exchnamechart}\"`)\n  //             if (this.month == '1M') {\n  //                 // this.sor=[];\n  //                 // this.firstmonth=[];\n  //                 // this.todayDate =0;\n  \n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 1);\n  //                 const onemonth = this.d.toISOString().slice(0, 10)\n  //                 // console.log(todayDate)\n  //                 // console.log(Date.parse(onemonth)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var axiosthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(onemonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n  \n  //                 });\n  \n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n  \n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         // console.log('responses 1', response.data)\n  \n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n  \n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc'])}\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n  \n  //                         this.lineSeries1.setData(this.sor);\n  //                         // })\n  //                         this.charts.timeScale().fitContent();\n                          \n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  \n  \n  //             }else if (this.month == '3M') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 3);\n  //                 const threemonth = this.d.toISOString().slice(0, 10)\n  //                 // console.log(threemonth, this.todayDate)\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var thirdthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(threemonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n  \n  //                 });\n  \n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n  \n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         console.log('responses 3', response.data)\n  \n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n  \n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n  \n  //                         this.lineSeries1.setData(this.sor);\n  //                         // })\n  //                         this.charts.timeScale().fitContent();\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //                 // this.chart()\n  //             } else if (this.month == '6M') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 6);\n  //                 const sixmonth = this.d.toISOString().slice(0, 10)\n  //                 console.log(sixmonth, this.todayDate);\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var sixththis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(sixmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n  \n  //                 });\n  \n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n  \n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         console.log('responses', response.data)\n  \n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n  \n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n  \n  //                         this.lineSeries1.setData(this.sor);\n  //                         this.charts.timeScale().fitContent();\n  //                         // })\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             } else if (this.month == '1YR') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 12);\n  //                 const oneyearmonth = this.d.toISOString().slice(0, 10)\n  //                 console.log(oneyearmonth, this.todayDate);\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var firtyearthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(oneyearmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n  \n  //                 });\n  \n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n  \n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         console.log('responses 1y', response.data)\n  \n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n  \n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n  \n  //                         this.lineSeries1.setData(this.sor);\n  //                         // })\n  //                         this.charts.timeScale().fitContent();\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             } else if (this.month == '3YR') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 36);\n  //                 const threeyearmonth = this.d.toISOString().slice(0, 10)\n  //                 console.log(threeyearmonth, this.todayDate);\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var thirdyearthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(threeyearmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n  \n  //                 });\n  \n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n  \n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         console.log('responses 3', response.data)\n  \n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n  \n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n  \n  //                         this.lineSeries1.setData(this.sor);\n  //                         this.charts.timeScale().fitContent();\n  //                         // })\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             }\n  //             else if (this.month == '5YR') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 60);\n  //                 const fiveyearmonth = this.d.toISOString().slice(0, 10)\n  //                 console.log(fiveyearmonth, this.todayDate);\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var fifthyearthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(fiveyearmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n  \n  //                 });\n  \n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n  \n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         console.log('responses 5', response.data)\n  \n  //                         this.firstmonth = response.data.map((val) => {\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n  \n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n  \n  //                         this.lineSeries1.setData(this.sor);\n  //                         // })\n  //                         this.charts.timeScale().fitContent();\n  \n  \n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             } else if (this.month == 'MAX') {\n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 120);\n  //                 const defaltmonth = this.d.toISOString().slice(0, 10)\n  //                 // console.log(todayDate)\n  //                 // console.log(Date.parse(this.todayDate) / 1000 + 19800);\n  //                 // console.log(Date.parse(defaltmonth) / 1000 + 19800)\n  //                 // var tenthis = this;\n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(defaltmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n  \n  //                 });\n  \n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n  \n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         // console.log('res',response)\n  \n  //                         this.firstmonth = response.data.map((val) => {\n  //                             // console.log(val)\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n  \n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc']) }\n  //                         });\n  \n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n  \n  //                         this.lineSeries1.setData(this.sor);\n  //                         this.charts.timeScale().fitContent();\n  \n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             } else {\n  \n  //                 this.todayDate = new Date().toISOString().slice(0, 10);\n  //                 this.d = new Date(this.todayDate);\n  //                 this.d.setMonth(this.d.getMonth() - 1);\n  //                 const defaltmonth = this.d.toISOString().slice(0, 10)\n  //                 // console.log(todayDate)\n  //                 // console.log(Date.parse(defalt)/1000 +19800);\n  //                 // console.log(Date.parse(todayDate)/1000 + 19800)\n  //                 // var defalutthis = this;\n  \n  //                 let data = JSON.stringify({\n  //                     // \"symbol\":\"NSE:Nifty 50\",\n  //                     \"symbol\": tk,\n  //                     //   \"start\": 1687868553,\n  //                     //   \"end\": 1688534153,\n  //                     start: Date.parse(defaltmonth) / 1000 + 19800,\n  //                     end: Date.parse(this.todayDate) / 1000 + 19800,\n  \n  //                 });\n  \n  //                 let config = {\n  //                     method: 'post',\n  //                     maxBodyLength: Infinity,\n  //                     url: `${api}/getchartData`,\n  //                     headers: {\n  //                         'Content-Type': 'application/json'\n  //                     },\n  //                     data: data\n  //                 };\n  \n  //                 axios.request(config)\n  //                     .then((response) => {\n  //                         // console.log('res',response)\n  \n  //                         this.firstmonth = response.data.map((val) => {\n  //                             // console.log(val)\n  //                             const dataes = JSON.parse(val)\n  //                             // console.log(dataes[\"time\"],'time')\n  \n  //                             return { time: parseFloat(dataes['ssboe']), value: parseFloat(dataes['intc'] )}\n  //                         });\n  \n  //                         this.sor = this.firstmonth.sort(function (a, b) { return a.time - b.time }\n  //                         );\n  \n  //                         this.lineSeries1.setData(this.sor);\n  \n  //                         this.charts.timeScale().fitContent();\n  \n  //                         // })\n  //                         const l = this.sor\n  //                         // const first= this.sor\n  //                         console.log(l.slice(-1),'lost',l.slice(0,1),'first')\n  //                         const first = l.slice(-1)\n  //                         const second= l.slice(0,1)\n  //                         // console.log(first - second)\n  //                         let fisrts=first.map((val)=>{\n  //                           const data=val\n  //                           return data.value\n  //                         })\n  //                         let seconds = second.map((val)=>{\n  //                           const data= val\n  //                           return data.value\n  //                         })\n  //                         // console.log((fisrts - seconds),'kjasdd' )\n  //                         this.chartvalue= (((fisrts-seconds)/fisrts)*100).toFixed(2)\n  //                     })\n  //                     .catch((error) => {\n  //                         console.log(error);\n  //                     });\n  //             }\n  \n  //       document.body.style.position = \"relative\";\n  //       var container = document.createElement(\"div\");\n  //       document.body.appendChild(container);\n  \n  //       var toolTipWidth = 100;\n  //       var toolTipHeight = 80;\n  //       var toolTipMargin = 15;\n  //       var toolTip = document.createElement(\"div\");\n  //       // toolTip.style =  `width: 96px; height: 80px; position: absolute; display: none; padding: 8px; box-sizing: border-box; font-size: 12px; text-align: left; z-index: 1000; top: 12px; left: 12px; pointer-events: none; border: 1px solid; border-radius: 2px;font-family: -apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;`;\n  //       // toolTip.style.background = 'white';\n  //       // toolTip.style.color = 'black';\n  //       // toolTip.style.borderColor = 'rgba(0, 150, 136, 1)';\n  //       toolTip.className = \"tooltip\";\n  //       container.appendChild(toolTip);\n  //       this.charts.subscribeCrosshairMove((param) => {\n  //         console.log(\"parma\", param);\n  //         if (\n  //           param.point === undefined ||\n  //           !param.time ||\n  //           param.point.x < 0 ||\n  //           param.point.x > this.charts.clientWidth ||\n  //           param.point.y < 0 ||\n  //           param.point.y > this.charts.clientHeight\n  //         ) {\n  //           toolTip.style.display = \"none\";\n  //         } else {\n  //           // time will be in the same format that we supplied to setData.\n  //           // thus it will be YYYY-MM-DD\n  //           // const dateStr = param.time;\n  //           // console.log('str dates',dateStr)\n  //           toolTip.style.display = \"block\";\n  //           var data = param.seriesData.get(this.lineSeries1);\n  //           // var secdata= param.seriesData.get(secondval);\n  //           // var threedata= param.seriesData.get(thirdval);\n  //           var price = data.value \n  //           const x =data.time-19800\n  //           var lestm = new Date(x * 1000)\n            \n  //           var time = lestm.getHours() +':' +lestm.getMinutes();\n  \n  //         // var time = data.time\n  //           var date = new Date(data.time*1000)\n  //           // var day = new Date(0)\n  //           // var times = date.time\n  //           // var formet= new Intl.DateTimeFormat('fr', {month: 'short'})\n  //           var time_date =date.toLocaleString('default', {month:\"short\"}) + ' '+date.getDate()+','+ date.getFullYear() \n  //           console.log(time_date,(time))\n  \n  //           // const secprice = secdata.value !== undefined ? secdata.value : '';\n  //           // const thirprice = threedata.value !== undefined ? threedata.value : '';\n  //           console.log(\"param1\", price, data.time );\n  //           // toolTip.innerHTML = `<div style=\"color: ${'rgba(0, 150, 136, 1)'}\">Apple Inc.</div><div style=\"font-size: 24px; margin: 4px 0px; color: ${'black'}\">\n  //           // \t${Math.round(100 * price) / 100}\n  \n  //           // \t</div><div style=\"color: ${'black'}\">\n  //           // \t${dateStr}\n  //           // \t</div>`;toolTip1.innerHTML = `<div style=\"font-size: 16px;font-weight:bold;Line-height:14px; margin: 4px 0px;font-family: \"Inter\", sans-serif; color: ${'black'}\">${ '&#8377;'+Math.round(100 * price) / 100}</div><div style=\"font-size:14px;font-family: \"Inter\", sans-serif;color: ${'black'}\">${dateStr}</div>`;\n  //           // var vol = []\n  //           // if(price){\n  //           //   const todayDate = new Date().toISOString().slice(0, 10);\n  //           //       const d = new Date(todayDate);\n  //           //       d.setMonth(d.getMonth() - 120);\n  //           //       const defaltmonth = d.toISOString().slice(0, 10)\n  //           //       // console.log(todayDate)\n  //           //       // console.log(Date.parse(this.todayDate) / 1000 + 19800);\n  //           //       // console.log(Date.parse(defaltmonth) / 1000 + 19800)\n  //           //       // var tenthis = this;\n  //           //       let data = JSON.stringify({\n  //           //           // \"symbol\":\"NSE:Nifty 50\",\n  //           //           \"symbol\": tk,\n  //           //           //   \"start\": 1687868553,\n  //           //           //   \"end\": 1688534153,\n  //           //           start: Date.parse(defaltmonth) / 1000 + 19800,\n  //           //           end: Date.parse(todayDate) / 1000 + 19800,\n  \n  //           //       });\n  \n  //           //       let config = {\n  //           //           method: 'post',\n  //           //           maxBodyLength: Infinity,\n  //           //           url: `${api}/getchartData`,\n  //           //           headers: {\n  //           //               'Content-Type': 'application/json'\n  //           //           },\n  //           //           data: data\n  //           //       };\n  \n  //           //       axios.request(config)\n  //           //           .then((response) => {\n  //           //               // console.log('res',response)\n  //           //            const data= JSON.parse(response.data)\n  //           //               // console.log(vol)\n  //           //               for(const elem in data){\n  //           //                 vol.push({'volume':JSON.parse(elem['intv'])})\n                            \n  \n  //           //               }\n  //           //               console.log('data',vol)\n  \n  //           //           })\n  //           //           .catch((error) => {\n  //           //               console.log(error);\n  //           //           });\n  //           // }\n  \n  //           // toolTip.style =`box-shadow: 0 0 5px 2px #9e9e9e3a;`\n  //           toolTip.innerHTML = \n  //           '<div style=\"display: flex;flex-wrap: wrap;\"><div style=\"font-size: 14px; margin: 4px 0px ;text-align: left;color=\"#000\";font-family: \"Inter;line-height:16px; font-weight:559;letter-spacing:-0.28px;font-style:normal;\", sans-serif;   id=text;>INR ₹'+ Math.round(100 * price) / 100+\"</div></div>\"+\n  //           '<div style=\"display: flex;flex-wrap: wrap;\"><div style=\"line-height:100%;letter-spacing: -0.096px;font-style: normal;font-weight: 469;font-size: 12px;margin: 4px 0px ;color: #666;font-family: \"Inter\", sans-serif;   id=text;>'+time_date + '-' +time +\"</div></div>\"+\n  //           '<div style=\"display: flex;flex-wrap: wrap;\"><div style=\"line-height:100%;letter-spacing: -0.096px;font-style: normal;font-weight: 469;font-size: 12px; margin: 4px 0px ;color=\"#666\";font-family: \"Inter\", sans-serif;   id=text;>Volume :' +time+ \"</div></div>\"\n            \n  //           var coordinate = this.lineSeries1.priceToCoordinate(price);\n  //           var shiftedCoordinate = param.point.x + 400;\n  //           if (coordinate === null) {\n  //             return;\n  //           }\n  //           shiftedCoordinate = Math.max(0,Math.min(container.clientWidth - toolTipWidth, shiftedCoordinate));\n  //           var coordinateYaxis = coordinate - toolTipHeight - toolTipMargin > 0 ? coordinate - toolTipHeight - toolTipMargin : Math.max(0,Math.min(container.clientHeight - toolTipHeight - toolTipMargin,coordinate + toolTipMargin));\n  //           toolTip.style.left = shiftedCoordinate + \"px\";\n  //           toolTip.style.top = coordinateYaxis +300 + \"px\";\n  \n  //         }\n  //       });\n        \n  //         },\n  \n  \n  //       },\n          \n          \n    // mounted() {\n  \n      \n    //    this.chart()\n    //   // console.log(this.$route.value)\n    //   // console.log(this.value, window.location.href.split())\n    //   console.log('tk new values: ',this.token)\n      \n    // },\n    beforeDestroy() {\n      window.removeEventListener(\"scroll\", this.handleScroll);\n    },\n    mounted() {\n     this.values();\n      // this.sockets();\n  //  console.log(ProcessPacketString,'Response')\n    },\n   methods: {\n    // closeChart(){\n  \n    // }\n    values() {\n      this.dadata = localStorage.getItem('symbolssearch')\n      let container = this.$refs.chartContainer;\n      \n            \n      // this.dadata=localStorage\n      // console.log(this.dadata,this.datafeedUrl, localStorage.getItem('token'))\n    // container.appaendChild(this.$route.push('webchart'))  \n          const widgetOptions = {\n              // symbol:this.symbol ? this.dadata : this.symbol,\n        symbol : this.dadata,\n              datafeed: Datafeed ,\n        save_image: false,\n              interval: this.interval,\n              container: container,\n              library_path: this.libraryPath,\n        auto_save_delay: 5,\n        timezone: \"Asia/Kolkata\",\n              locale: 'en',\n        theme: \"White\",\n        disableUndo:this.disableUndo,\n        // \"use_localstorage_for_settings\",\n        disabled_features: [\n            // \"use_localstorage_for_settings\",\n            \"watchlist_import_export\",\n            \"header_saveload\",\n            \"header_symbol_search\",\n            \"header_compare\",\n            \"header_screenshot\",\n            // \"Save\",\n          ],\n          enabled_features: [\"dom_widget\", \"use_localstorage_for_settings\"],\n              // charts_storage_api_version: this.chartsStorageApiVersion,\n              client_id: this.clientId,\n              user_id: this.userId,\n              fullscreen: this.fullscreen,\n              autosize: this.autosize,\n              studies_overrides: this.studiesOverrides,\n      //   symbol_search_complete:(symbol) => {\n      //   console.log('selected symbol =>',symbol)\n      //   return new Promise((resolve)=>{\n      //     let newSymbol =   `this is my symbol- ${Window.localStorage.getItem('data')}`;\n      //     resolve(newSymbol)\n      //   })\n      // }\n          };\n  \n          const tvWidget = new widget(widgetOptions);\n          this.tvWidget = tvWidget;\n     \n          tvWidget.onChartReady(() => {\n        tvWidget.activeChart().applyOverrides({\n        \"mainSeriesProperties.style\":1\n      });\n      // tvWidget.subscribe(\"onAutoSaveNeeded\", function () {\n      //       tvWidget.save((obj) => {\n      //         console.log(obj,'val ')\n      //         localStorage.setItem(\"autoSave\", JSON.stringify(obj));\n      //       });\n      //     });\n      console.log(tvWidget.activeChart())\n              tvWidget.headerReady().then(() => {\n                  const button = tvWidget.createButton();\n  \n                  button.setAttribute('title', 'Click to show a notification popup');\n                  button.classList.add('apply-common-tooltip');\n  \n                  button.addEventListener('click', () =>\n                      tvWidget.showNoticeDialog({\n                          title: 'Notification',\n                          body: 'TradingView Charting Library API works correctly',\n                          callback: () => {\n                              // eslint-disable-next-line no-console\n                              console.log('Noticed!');\n                          },\n                      })\n                  );\n          // filled\n                  // button.innerHTML = 'Check API';\n              });\n          });\n      // this.subscrip()\n      // this.subscrip()\n      // var set = `${(localStorage.getItem('symbolssearch')).slice(0,3)}`+'|'+`${localStorage.getItem('token')}`\n    // //  var tes= Datafeed.resolveSymbol(\n    // //   `${(localStorage.getItem('symbolssearch')).slice(0,3)}`+'|'+`${localStorage.getItem('token')}`,\n  \n        \n    // //   )\n    //   // console.log(Datafeed.ltp)\n      // console.log('set',set,this.symbolInfos)\n      // console.log('jdus', tes)\n      // setTimeout(() => {\n  this.weblp = localStorage.getItem('ltp')\n      console.log(this.websocketSubscription)\n      // },100)\n      const tvWidgets = new widget(widgetOptions);\n      //   this.tvWidget = tvWidget;\n      //   window.tvWidget = tvWidget;\n      console.log(tvWidgets,'tudigets')\n      this.ltp();\n    },\n    ltp() {\n              let data=`jData={\"uid\":\"${clientid}\", \"exch\":\"${this.dadata.slice(0,3)}\",\"token\":\"${localStorage.getItem('token')}\"}&jKey=${session}`;\n         \n          console.log(data)\n          // if(data){\n          let config = {\n          method: 'post',\n          //   maxBodyLength: Infinity,\n          url: 'https://go.mynt.in/NorenWClientTP/GetQuotes',\n          headers: { \n              'Content-Type': 'text/plain'\n          },\n          data : data\n          };\n    \n          axios.request(config)\n          .then((response) => {\n          console.log((response.data));\n          // const les= response.data\n          // Datafeed.subscribeQuotesgetltpsub(\n          //     les,\n          //     this.optionChainDataParse,             \n          //     undefined\n          //   );\n          \n          // console.log(this.closeorderdata,'lp added')\n          })\n          .catch((error) => {\n          console.log(error);\n          });\n       \n          // }\n   \n  //  async subscrip() {\n      \n  //     // const axios = require('axios');\n  // //  var data= `jData={\"uid\":\"${clientid}\", \"exch\":\"${(localStorage.getItem('symbolssearch')).slice(0,3)}\",\"token\":\"${localStorage.getItem('token')}\"}&jKey=${session}`;\n  \n  // // var ltps=[]\n  // // this.weblp =0;\n  // let connection = new WebSocket('wss://go.mynt.in/NorenWSWeb/');\n  \n  // connection.onopen = function () {\n  // // var message = {\"t\": \"c\",\"uid\": `${clientid}`,\"actid\": `${clientid}`,\"source\":\"WEB\",\"susertoken\": `${session}`}\n  // var token = {\"t\": \"d\",\"k\": `${(localStorage.getItem('symbolssearch')).slice(0,3)}`+'|'+`${localStorage.getItem('token')}#`};\n  \n  // console.log(token);\n  \n  // // connection.send(JSON.stringify(message));\n  // setTimeout(() => {\n  // connection.send(JSON.stringify(token));\n  // }, 2000);\n  \n  // connection.onmessage = (msg) => {\n  // let count = JSON.parse(msg.data);\n  // console.log(count,\"ltp\");\n  // if(count.t == 'df'){\n  // if(count.lp !== undefined){\n  // // console.log(count.lp,'values')\n  // // this.weblp=(count.lp)\n  // // this.ltps.push(count.lp)\n  // this.weblp=count.lp\n  // // document.getElementById('values') = count.lp\n  // }\n  // console.log(this.weblp,'ltp')\n  // // console.log(this.ltps)\n  // }else {\n  // //\n  // }\n  \n  // };};\n  // // console.log(data)\n  \n  // },\n  //   subscribeQuotes(symbols, fastSymbols, onRealtimeCallback, listenerGUID) {\n  //     // In this example, `_quotesSubscriptions` is a global variable used to clear the subscription in `unsubscribeQuotes`\n  //     console.log(symbols,fastSymbols,onRealtimeCallback,listenerGUID,'jkjksad')\n  //     // this._quotesSubscriptions[listenerGUID] = setInterval(() => this.getQuotes(symbols.concat(fastSymbols), onRealtimeCallback, () => undefined), 5000);\n  // },\n   },\n  //  optionChainDataParse(data) {\n  //       console.log(data,'optioncharin')\n      \n  //     },\n  //  watch() {\n  //   this.weblp\n  //  }\n  },\n  destroyed() {\n      if (this.tvWidget !== null) {\n        this.tvWidget.remove();\n        this.tvWidget = null;\n      }\n    },\n  }\n  </script>\n  \n  <style>\n  /* .toolTip {\n      width: 140px;\n      height: 80px;\n      position: absolute;\n      display: none;\n      padding: 8px;\n      font-size: 12px;\n      color: #131722;\n      text-align: left;\n      z-index: 1000;\n      top: auto;\n      left: auto;\n      pointer-events: none;\n      border-radius: 2px;\n  } */\n  .tooltip {\n      width: 167.06px;\n      height: 85px;\n      position: absolute;\n      display: none;\n      padding: 8px;\n      box-sizing: border-box;\n      font-size: 12px;\n      color: #131722;\n      background-color: rgba(255, 255, 255, 1);\n      text-align: left;\n      z-index: 1000;\n      top: 12px;\n      left: 12px;\n    padding:10px;\n      pointer-events: none;\n      /* border: 1px solid rgba(0, 150, 136, 1); */\n      border-radius: 5px;\n    box-shadow: 0 0 5px 2px #c5c5c52c;\n  }\n  .TVChartContainers{\n    height: calc(70vh);\n  }\n  </style>"],"mappings":"AA+DA,OAAAA,KAAA;AACA;AACA,SAAAC,MAAA;AACA,OAAAC,QAAA;AACA;AACA;;AAEA;AACA,SAAAC,QAAA,EAAAC,OAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAC,IAAA;EACAC,MAAA,GAEA;EACAC,KAAA;IACA;MACA;MACAC,MAAA;MACAC,KAAA;MACA;MACA;MACAC,kBAAA;MACAC,iBAAA;IACA;EACA;EACA;EACA;EACA;EACAC,QAAA;IACA;IACA;EAAA,CACA;EACA;EACAC,KAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,QAAA;MACAC,OAAA;MACA;MACAC,IAAA,EAAAC;IACA;IACA;IACA;IACA;IACA;IACAC,WAAA;MACAH,OAAA;MACAC,IAAA,EAAAC;IACA;IACAE,gBAAA;MACAJ,OAAA;MACAC,IAAA,EAAAC;IACA;IACAG,uBAAA;MACAL,OAAA;MACAC,IAAA,EAAAC;IACA;IACAI,QAAA;MACAN,OAAA;MACAC,IAAA,EAAAC;IACA;IACAK,MAAA;MACAP,OAAA;MACAC,IAAA,EAAAC;IACA;IACAM,IAAA;MACAR,OAAA;MACAC,IAAA,EAAAQ;IACA;IACAC,UAAA;MACAV,OAAA;MACAC,IAAA,EAAAQ;IACA;IACAE,QAAA;MACAX,OAAA;MACAC,IAAA,EAAAQ;IACA;IACAG,gBAAA;MACAX,IAAA,EAAAY;IACA;EAEA;EACAC,QAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAGA;;EAGA;;EAGA;EACA;EACA;EACA;;EAEA;EACAC,cAAA;IACAC,MAAA,CAAAC,mBAAA,gBAAAC,YAAA;EACA;EACAC,QAAA;IACA,KAAAC,MAAA;IACA;IACA;EACA;;EACAC,OAAA;IACA;;IAEA;IACAD,OAAA;MACA,KAAA3B,MAAA,GAAA6B,YAAA,CAAAC,OAAA;MACA,IAAAC,SAAA,QAAAC,KAAA,CAAAC,cAAA;;MAGA;MACA;MACA;MACA,MAAAC,aAAA;QACA;QACAC,MAAA,OAAAnC,MAAA;QACAoC,QAAA,EAAA1C,QAAA;QACA2C,UAAA;QACA/B,QAAA,OAAAA,QAAA;QACAyB,SAAA,EAAAA,SAAA;QACAO,YAAA,OAAA5B,WAAA;QACA6B,eAAA;QACAC,QAAA;QACAC,MAAA;QACAC,KAAA;QACAC,WAAA,OAAAA,WAAA;QACA;QACAC,iBAAA;QACA;QACA,2BACA,mBACA,wBACA,kBACA;QACA;QAAA,CACA;;QACAC,gBAAA;QACA;QACAC,SAAA,OAAAjC,QAAA;QACAkC,OAAA,OAAAjC,MAAA;QACAG,UAAA,OAAAA,UAAA;QACAC,QAAA,OAAAA,QAAA;QACA8B,iBAAA,OAAA7B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;;MAEA,MAAAE,QAAA,OAAA5B,MAAA,CAAAyC,aAAA;MACA,KAAAb,QAAA,GAAAA,QAAA;MAEAA,QAAA,CAAA4B,YAAA;QACA5B,QAAA,CAAA6B,WAAA,GAAAC,cAAA;UACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAC,OAAA,CAAAC,GAAA,CAAAhC,QAAA,CAAA6B,WAAA;QACA7B,QAAA,CAAAiC,WAAA,GAAAC,IAAA;UACA,MAAAC,MAAA,GAAAnC,QAAA,CAAAoC,YAAA;UAEAD,MAAA,CAAAE,YAAA;UACAF,MAAA,CAAAG,SAAA,CAAAC,GAAA;UAEAJ,MAAA,CAAAK,gBAAA,gBACAxC,QAAA,CAAAyC,gBAAA;YACAC,KAAA;YACAC,IAAA;YACAC,QAAA,EAAAA,CAAA;cACA;cACAb,OAAA,CAAAC,GAAA;YACA;UACA,EACA;UACA;UACA;QACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAGA;MACA;MACA;MACA;MACA;MACA,KAAApD,KAAA,GAAA4B,YAAA,CAAAC,OAAA;MACAsB,OAAA,CAAAC,GAAA,MAAAa,qBAAA;MACA;MACA,MAAAC,SAAA,OAAA1E,MAAA,CAAAyC,aAAA;MACA;MACA;MACAkB,OAAA,CAAAC,GAAA,CAAAc,SAAA;MACA,KAAAC,GAAA;IACA;IACAA,IAAA;MACA,IAAArE,IAAA,oBAAAJ,QAAA,mBAAAK,MAAA,CAAAqE,KAAA,oBAAAxC,YAAA,CAAAC,OAAA,oBAAAlC,OAAA;MAEAwD,OAAA,CAAAC,GAAA,CAAAtD,IAAA;MACA;MACA,IAAAuE,MAAA;QACAC,MAAA;QACA;QACAC,GAAA;QACAC,OAAA;UACA;QACA;QACA1E,IAAA,EAAAA;MACA;MAEAP,KAAA,CAAAkF,OAAA,CAAAJ,MAAA,EACAf,IAAA,CAAAoB,QAAA;QACAvB,OAAA,CAAAC,GAAA,CAAAsB,QAAA,CAAA5E,IAAA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;MACA,GACA6E,KAAA,CAAAC,KAAA;QACAzB,OAAA,CAAAC,GAAA,CAAAwB,KAAA;MACA;;MAEA;;MAEA;;MAEA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;MACA;;MAEA;;MAEA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;EACA;;EACAC,UAAA;IACA,SAAAzD,QAAA;MACA,KAAAA,QAAA,CAAA0D,MAAA;MACA,KAAA1D,QAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}